using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libogg"], :libogg),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/staticfloat/OggBuilder/releases/download/v1.3.3-3"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    BinaryProvider.Linux(:aarch64, :glibc, :blank_abi) => ("$bin_prefix/Ogg.aarch64-linux-gnu.tar.gz", "fb9ac4883b0a4baef13f3016b542744a1d786d186038fabe5f57518197695f5d"),
    BinaryProvider.Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/Ogg.arm-linux-gnueabihf.tar.gz", "161f8cf6b8b4bd495c41f1d88899a6064a0444306c16d1dbad554642a3e89611"),
    BinaryProvider.Linux(:i686, :glibc, :blank_abi) => ("$bin_prefix/Ogg.i686-linux-gnu.tar.gz", "635708f9c87a796ad65c392c62846da3350c1d934a470ee8b86f95611a77699f"),
    BinaryProvider.Linux(:i686, :musl, :blank_abi) => ("$bin_prefix/Ogg.i686-linux-musl.tar.gz", "54e0f6d77f1db4afd2de69058c3d15403581aad36dda83d2ad61771113d0f410"),
    BinaryProvider.Windows(:i686, :blank_libc, :blank_abi) => ("$bin_prefix/Ogg.i686-w64-mingw32.tar.gz", "51cffd1229735d56a030ab78fb2968f3584d1e2c337c0e1aad357dc2b74fcfa1"),
    BinaryProvider.Linux(:powerpc64le, :glibc, :blank_abi) => ("$bin_prefix/Ogg.powerpc64le-linux-gnu.tar.gz", "b325fe0ce06e1d1588caa8d24da9dc750079cfc3c3e6d32408187dd639f141bb"),
    BinaryProvider.MacOS(:x86_64, :blank_libc, :blank_abi) => ("$bin_prefix/Ogg.x86_64-apple-darwin14.tar.gz", "b6d105845344223b959b788ab40c6143f085b7e1f35225b94c11c5b16612730f"),
    BinaryProvider.Linux(:x86_64, :glibc, :blank_abi) => ("$bin_prefix/Ogg.x86_64-linux-gnu.tar.gz", "5e09218b923643fd2a1e371b9288bc6dafa3adcb80e65761ac1343b8d3533d8d"),
    BinaryProvider.Linux(:x86_64, :musl, :blank_abi) => ("$bin_prefix/Ogg.x86_64-linux-musl.tar.gz", "52e0097cd1969f5594b939a8d50cb228cebb6a579061da8d70d14c8e930ca2c8"),
    BinaryProvider.FreeBSD(:x86_64, :blank_libc, :blank_abi) => ("$bin_prefix/Ogg.x86_64-unknown-freebsd11.1.tar.gz", "92245167b21af799d71abfcecba6885799e5e7740ace33c1623a9195a40a0348"),
    BinaryProvider.Windows(:x86_64, :blank_libc, :blank_abi) => ("$bin_prefix/Ogg.x86_64-w64-mingw32.tar.gz", "64e0d3412c6304e12156ffaa76765e048651d828dbb7d53ed64fbd7dd3b008c9"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
